// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#import "SuperAwesome.h"
#import <AVFoundation/AVFoundation.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SuperAwesome",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM_NAMED(NSInteger, SAAdLoading, "AdLoading", closed) {
  SAAdLoadingNone = 0,
  SAAdLoadingLoading = 1,
  SAAdLoadingLoaded = 2,
};

@protocol SAVideoPlayerControlsViewDelegate;

/// This protocol defines the public interface of a video’s chrome
/// (that is also used to control the video from the user’s perspective)
SWIFT_PROTOCOL_NAMED("VideoPlayerControlsView")
@protocol SAVideoPlayerControlsView
/// Method that sets the chrome in the playing state
- (void)setPlaying;
/// Method that sets the chrome in the paused state
- (void)setPaused;
/// Method that sets the chrome in the completed state
- (void)setCompleted;
/// Method that sets the chrome in the error state
/// @param: error - the error object
- (void)setError:(NSError * _Nonnull)error;
/// Method that updates the chrome’s time and duration
/// @param time current time
/// @param duration current duration
- (void)setTime:(NSInteger)time andDuration:(NSInteger)duration;
/// @return whether the chrome element is in a playing state or not
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
/// Method that sets the chrome in the visible state
- (void)show;
/// Method that sets the chrome in the invisible state
- (void)hide;
/// Method that sets the chrome in the minimised state
- (void)setMinimised;
/// Method that sets the chrome in the maximised state
- (void)setMaximised;
/// Method that returns whether the chrome is in maximised or minimised state
- (BOOL)isMaximised SWIFT_WARN_UNUSED_RESULT;
/// Method that sets the delegate of the ChromeControl
- (void)setDelegate:(id <SAVideoPlayerControlsViewDelegate> _Nonnull)delegate;
/// Method that sets an event listener
- (void)setListener:(id <SAVideoPlayerControlsViewDelegate> _Nonnull)controlsViewListener;
@end

@class NSCoder;

SWIFT_CLASS_NAMED("AdSocialVideoPlayerControlsView")
@interface SAAdSocialVideoPlayerControlsView : UIView <SAVideoPlayerControlsView>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)updateConstraints;
/// /////////////////////////////////////////////////////////////////////////
- (void)makeCloseButtonVisible;
/// /////////////////////////////////////////////////////////////////////////
- (void)setPlaying;
- (void)setPaused;
- (void)setCompleted;
- (void)setError:(NSError * _Nonnull)error;
- (void)setTime:(NSInteger)time andDuration:(NSInteger)duration;
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)show;
- (void)hide;
- (void)setMinimised;
- (void)setMaximised;
- (BOOL)isMaximised SWIFT_WARN_UNUSED_RESULT;
- (void)setDelegate:(id <SAVideoPlayerControlsViewDelegate> _Nonnull)delegate;
- (void)setListener:(id <SAVideoPlayerControlsViewDelegate> _Nonnull)controlsViewListener;
@end


SWIFT_CLASS_NAMED("AdState")
@interface SAAdState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The associated delegate of chrome control
SWIFT_PROTOCOL_NAMED("VideoPlayerControlsViewDelegate")
@protocol SAVideoPlayerControlsViewDelegate
/// This method is called by the chrome control when the progress
/// bar has started to move
- (void)didStartProgressBarSeek;
/// This method is called by the chrome control when the progress
/// bar has finished to move
/// @param value - the value the chrome has seeked to
- (void)didEndProgressBarSeek:(float)value;
/// This method is called by the chrome control when the
/// play button has been tapped
- (void)didTapPlay;
/// This method is called by the chrome control when the
/// pause button has been tapped
- (void)didTapPause;
/// This method is called by the chrome control when the
/// replayu button has been tapped
- (void)didTapReplay;
/// This method is called by the chrome control when the
/// maximise button has been tapped
- (void)didTapMaximise;
/// This method is called by the chrome control when the
/// minimise button has been tapped
- (void)didTapMinimise;
@end

@protocol SAVideoPlayerControls;

/// The associated delegate of the media control
SWIFT_PROTOCOL_NAMED("VideoPlayerControlsDelegate")
@protocol SAVideoPlayerControlsDelegate
/// This method is called by the VideoPlayerControls when the media is prepared
/// @param control - the current media control instance
- (void)didPrepareControl:(id <SAVideoPlayerControls> _Nonnull)control;
/// This method is called by the VideoPlayerControls when the time has been updated
/// @param control - the current media control instance
/// @param time - the current media time
/// @param duration - the total duration of the media
- (void)didPrepareControl:(id <SAVideoPlayerControls> _Nonnull)control withTime:(NSInteger)time andDuration:(NSInteger)duration;
/// This method is called by the VideoPlayerControls when the media is finished
/// @param control - the current media control instance
/// @param time - the current media time
/// @param duration - the total duration of the media
- (void)didCompleteControl:(id <SAVideoPlayerControls> _Nonnull)control withTime:(NSInteger)time andDuration:(NSInteger)duration;
/// This method is called by the VideoPlayerControls when seeking is over
/// @param control - the current media control instance
- (void)didCompleteSeekOnControl:(id <SAVideoPlayerControls> _Nonnull)control;
/// This method is called by the VideoPlayerControls when an error happened
/// @param control - the current media control instance
/// @param time - the current media time
/// @param duration - the total duration of the media
- (void)didErrorOnControl:(id <SAVideoPlayerControls> _Nonnull)control withError:(NSError * _Nonnull)error andTime:(NSInteger)time andDuration:(NSInteger)duration;
@end

@class AVPlayer;
@class AVPlayerLayer;
@protocol SAVideoPlayerDelegate;

/// This protocol defines the public interface for a video player.
/// A video player brings together a:
/// <ul>
///   <li>
///     media control
///   </li>
///   <li>
///     chrome control
///   </li>
///   <li>
///     video surfaces
///     to play local or remote videos
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("VideoPlayer")
@protocol SAVideoPlayer <SAVideoPlayerControlsDelegate, SAVideoPlayerControlsViewDelegate>
/// Sets the media control for the video player
/// @param control - an instance of an object that implements the MediaControl protocol
- (void)setControls:(id <SAVideoPlayerControls> _Nonnull)controller;
/// Sets the chrome control for the video player
/// @param chrome - an instance of an object that implements the ChromeControl protocol
- (void)setConstrolsView:(id <SAVideoPlayerControlsView> _Nonnull)controllerView;
/// Sets the state of the video to maximised
- (void)maximise;
/// Sets the state of the video to minimised
- (void)minimise;
/// Destroy & release the whole video player
- (void)destroy;
/// Return the current AVPlayer
- (AVPlayer * _Nullable)avPlayer SWIFT_WARN_UNUSED_RESULT;
/// Return the current AVPlayerLayer
- (AVPlayerLayer * _Nullable)avPlayerLayer SWIFT_WARN_UNUSED_RESULT;
/// *Set the delegate of the VideoPlayer protocol
/// <ul>
///   <li>
///     @param delegate - an instance of an object that implements VideoPlayerDelegate
///   </li>
/// </ul>
- (void)setDelegate:(id <SAVideoPlayerDelegate> _Nullable)delegate;
@end


SWIFT_CLASS_NAMED("AwesomeVideoPlayer")
@interface SAAwesomeVideoPlayer : UIView <SAVideoPlayer>
/// /////////////////////////////////////////////////////////////////////////
- (void)setControls:(id <SAVideoPlayerControls> _Nonnull)controller;
- (void)setConstrolsView:(id <SAVideoPlayerControlsView> _Nonnull)controllerView;
- (void)destroy;
- (void)layoutSubviews;
- (void)maximise;
- (void)minimise;
- (void)setDelegate:(id <SAVideoPlayerDelegate> _Nullable)delegate;
- (AVPlayer * _Nullable)avPlayer SWIFT_WARN_UNUSED_RESULT;
- (AVPlayerLayer * _Nullable)avPlayerLayer SWIFT_WARN_UNUSED_RESULT;
/// /////////////////////////////////////////////////////////////////////////
- (void)didPrepareControl:(id <SAVideoPlayerControls> _Nonnull)control;
- (void)didPrepareControl:(id <SAVideoPlayerControls> _Nonnull)control withTime:(NSInteger)time andDuration:(NSInteger)duration;
- (void)didCompleteControl:(id <SAVideoPlayerControls> _Nonnull)control withTime:(NSInteger)time andDuration:(NSInteger)duration;
- (void)didCompleteSeekOnControl:(id <SAVideoPlayerControls> _Nonnull)control;
- (void)didErrorOnControl:(id <SAVideoPlayerControls> _Nonnull)control withError:(NSError * _Nonnull)error andTime:(NSInteger)time andDuration:(NSInteger)duration;
/// /////////////////////////////////////////////////////////////////////////
- (void)didStartProgressBarSeek;
- (void)didEndProgressBarSeek:(float)value;
- (void)didTapPlay;
- (void)didTapPause;
- (void)didTapReplay;
- (void)didTapMaximise;
- (void)didTapMinimise;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end







@class UIViewController;
@class SAAd;

SWIFT_CLASS_NAMED("VideoAd")
@interface SAVideoAd : NSObject
/// /////////////////////////////////////////////////////////////////////////
+ (void)load:(NSInteger)placementId;
+ (void)play:(NSInteger)placementId fromVC:(UIViewController * _Nonnull)viewController;
+ (BOOL)hasAdAvailable:(NSInteger)placementId SWIFT_WARN_UNUSED_RESULT;
+ (SAAd * _Nullable)getAd:(NSInteger)placementId SWIFT_WARN_UNUSED_RESULT;
/// /////////////////////////////////////////////////////////////////////////
+ (void)setCallback:(sacallback _Nonnull)callback;
+ (void)setTestMode:(BOOL)testMode;
+ (void)enableTestMode;
+ (void)disableTestMode;
+ (void)setParentalGate:(BOOL)parentalGate;
+ (void)enableParentalGate;
+ (void)disableParentalGate;
+ (void)setBumperPage:(BOOL)bumperPage;
+ (void)enableBumperPage;
+ (void)disableBumperPage;
+ (void)setConfiguration:(SAConfiguration)config;
+ (void)setConfigurationProduction;
+ (void)setConfigurationStaging;
+ (void)setOrientation:(SAOrientation)orientation;
+ (void)setOrientationAny;
+ (void)setOrientationPortrait;
+ (void)setOrientationLandscape;
+ (void)setCloseButton:(BOOL)close;
+ (void)enableCloseButton;
+ (void)disableCloseButton;
+ (void)setSmallClick:(BOOL)smallClick;
+ (void)enableSmallClickButton;
+ (void)disableSmallClickButton;
+ (void)setCloseAtEnd:(BOOL)close;
+ (void)enableCloseAtEnd;
+ (void)disableCloseAtEnd;
+ (void)setPlaybackMode:(SARTBStartDelay)delay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SAEvents;

SWIFT_CLASS_NAMED("VideoClick")
@interface SAVideoClick : NSObject
- (nonnull instancetype)initWithEvents:(SAEvents * _Nonnull)events andParentalGateEnabled:(BOOL)isParentalGateEnabled andBumperPageEnabled:(BOOL)isBumperPageEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("VideoEvents")
@interface SAVideoEvents : NSObject
/// ///////////////////////////////////////////////////////////////////////////
- (nonnull instancetype)initWithEvents:(SAEvents * _Nonnull)events OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("VideoEventsDelegate")
@protocol SAVideoEventsDelegate
- (void)hasBeenVisible;
@end



/// This protocol defines the public interface for any object that can be
/// used to control a piece of media.
SWIFT_PROTOCOL_NAMED("VideoPlayerControls")
@protocol SAVideoPlayerControls
/// Method that starts playing a piece of media
/// @param url - the url of a valid piece of media (remote or local)
- (void)play:(NSURL * _Nonnull)url;
/// Method that resumes the media play
- (void)start;
/// Method that pauses the media play
- (void)pause;
/// Method that resets the state of the MediaControl, but should
/// not release all resources so that it becomes unavailable
- (void)reset;
/// Method that frees up all resources owned by the MediaControl;
/// From here on, it cannot be re-used to play media
- (void)destroy;
/// Method to seek to a different position
- (void)seekTo:(CMTime)position;
/// Method that returns the total duration, in seconds, of the
/// media control
- (NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// Method that returns the current position, in seconds, of the
/// media control
- (NSInteger)currentPosition SWIFT_WARN_UNUSED_RESULT;
/// Method to set the MediaControl’s delegate
/// @param delegate - a reference to an object implementing the MediaControlDelegate protocol
- (void)setDelegate:(id <SAVideoPlayerControlsDelegate> _Nonnull)delegate;
@end

@class AVPlayerItem;

SWIFT_CLASS_NAMED("VideoPlayerController")
@interface SAVideoPlayerController : AVPlayer <SAVideoPlayerControls>
/// /////////////////////////////////////////////////////////////////////////
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// /////////////////////////////////////////////////////////////////////////
- (void)play:(NSURL * _Nonnull)url;
- (void)start;
- (void)reset;
- (void)destroy;
- (void)seekTo:(CMTime)position;
- (NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)currentPosition SWIFT_WARN_UNUSED_RESULT;
/// /////////////////////////////////////////////////////////////////////////
- (void)setDelegate:(id <SAVideoPlayerControlsDelegate> _Nonnull)delegate;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end






/// The Delegate of the video player
SWIFT_PROTOCOL_NAMED("VideoPlayerDelegate")
@protocol SAVideoPlayerDelegate
/// This method is called by the video player when it is prepared and
/// has started to play a video
/// @param videoPlayer - the current videoPlayer instance
/// @param time - the current time of the video player
/// @param duration - the current total duration of the video player
- (void)didPrepareVideoPlayer:(id <SAVideoPlayer> _Nonnull)videoPlayer withTime:(NSInteger)time andDuration:(NSInteger)duration;
/// This method is called by the video player when it has updated the time
/// @param videoPlayer - the current videoPlayer instance
/// @param time - the current time of the video player
/// @param duration - the current total duration of the video player
- (void)didUpdateTimeForVideoPlayer:(id <SAVideoPlayer> _Nonnull)videoPlayer withTime:(NSInteger)time andDuration:(NSInteger)duration;
/// This method is called by the video player when it has finished playing
/// @param videoPlayer - the current videoPlayer instance
/// @param time - the current time of the video player
/// @param duration - the current total duration of the video player
- (void)didCompleteVideoPlayer:(id <SAVideoPlayer> _Nonnull)videoPlayer withTime:(NSInteger)time andDuration:(NSInteger)duration;
/// This method is called by the video player when it has encountered an error
/// @param videoPlayer - the current videoPlayer instance
/// @param time - the current time of the video player
/// @param duration - the current total duration of the video player
- (void)didErrorVideoPlayer:(id <SAVideoPlayer> _Nonnull)videoPlayer withError:(NSError * _Nonnull)error withTime:(NSInteger)time andDuration:(NSInteger)duration;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
